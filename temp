import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.recipes.locks.InterProcessMutex;
import org.apache.curator.utils.ZKPaths;
import org.apache.zookeeper.data.Stat;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ZookeeperCleanupService {

    private static final Logger logger = LoggerFactory.getLogger(ZookeeperCleanupService.class);

    @Autowired
    private CuratorFramework curatorFramework;

    @Scheduled(cron = "0 0 * * * *") // This cron expression runs the task every hour
    public void cleanUpOldNodes() {
        try {
            String parentPath = "/lock/parent";
            List<String> children = curatorFramework.getChildren().forPath(parentPath);
            long currentTime = System.currentTimeMillis();
            long thresholdTime = currentTime - (2 * 60 * 60 * 1000); // 2 hours

            for (String child : children) {
                String childPath = ZKPaths.makePath(parentPath, child);
                Stat stat = curatorFramework.checkExists().forPath(childPath);
                if (stat != null && stat.getCtime() < thresholdTime) {
                    try {
                        InterProcessMutex lock = new InterProcessMutex(curatorFramework, childPath);
                        if (lock.acquire(15, TimeUnit.SECONDS)) {
                            try {
                                logger.debug("Deleting old node: {}", childPath);
                                curatorFramework.delete().forPath(childPath);
                                logger.debug("Node deleted: {}", childPath);
                            } finally {
                                lock.release();
                            }
                        }
                    } catch (Exception e) {
                        logger.error("Failed to delete node: " + childPath, e);
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Error during cleanup of old nodes", e);
        }
    }
}
